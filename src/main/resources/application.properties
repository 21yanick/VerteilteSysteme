############################################################
## Server Config
############################################################
quarkus.http.port=8081
quarkus.http.auth.proactive=true

############################################################
## MySQL Datasource
############################################################
quarkus.datasource.db-kind=mysql
quarkus.datasource.jdbc.url=jdbc:mysql://localhost:3306/blogdb
quarkus.datasource.username=dbuser
quarkus.datasource.password=dbuserpassword
quarkus.datasource.jdbc.driver=com.mysql.cj.jdbc.Driver

############################################################
## OIDC Config (Keycloak auf Docker)
############################################################
quarkus.oidc.auth-server-url=http://keycloak:8080/realms/blog
quarkus.oidc.client-id=backend-service
quarkus.oidc.credentials.secret=secret!
quarkus.oidc.tls.verification=none

############################################################
## Flyway for DB Migrations
############################################################
quarkus.flyway.migrate-at-start=true
quarkus.flyway.locations=classpath:db/migration

############################################################
## Swagger UI / OpenAPI
############################################################
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.path=/swagger-ui
quarkus.smallrye-openapi.path=/openapi

############################################################
## Logging (Debug Logs for Security) - optional
############################################################
quarkus.log.category."io.quarkus.oidc".level=DEBUG
quarkus.log.category."io.quarkus.security".level=DEBUG

############################################################
## Reactive Messaging - Kafka
############################################################
# General Kafka configuration
mp.messaging.connector.smallrye-kafka.bootstrap.servers=kafka:9092

# Validation channels configuration

# Validation channels using different internal channel names
# Channel zum Senden von Validierungsanfragen
mp.messaging.outgoing.validation-request-out.connector=smallrye-kafka
mp.messaging.outgoing.validation-request-out.topic=blog-validation-requests
mp.messaging.outgoing.validation-request-out.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer

# Channel zum Empfangen von Validierungsanfragen (im Validator)
mp.messaging.incoming.validation-request-in.connector=smallrye-kafka
mp.messaging.incoming.validation-request-in.topic=blog-validation-requests
mp.messaging.incoming.validation-request-in.value.deserializer=ch.hftm.messaging.ValidationRequestDeserializer
mp.messaging.incoming.validation-request-in.group.id=blog-validator-group

# Channel zum Senden von Validierungsantworten (vom Validator)
mp.messaging.outgoing.validation-response-out.connector=smallrye-kafka
mp.messaging.outgoing.validation-response-out.topic=blog-validation-responses
mp.messaging.outgoing.validation-response-out.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer

# Channel zum Empfangen von Validierungsantworten
mp.messaging.incoming.validation-response-in.connector=smallrye-kafka
mp.messaging.incoming.validation-response-in.topic=blog-validation-responses
mp.messaging.incoming.validation-response-in.value.deserializer=ch.hftm.messaging.ValidationResponseDeserializer
mp.messaging.incoming.validation-response-in.auto.offset.reset=earliest
mp.messaging.incoming.validation-response-in.group.id=blog-validator-consumer

